import * as dotenv from "dotenv";
dotenv.config();

import { ethers } from "ethers";
import { numJobs, jobAt } from "../services/sequencer";
import { getLastWorkedBlock } from "../types/job.types";
import { sendDiscordAlert } from "../types/discord.types";

console.log("üöÄ ========================================");
console.log("üöÄ MAKERDAO JOB MONITOR STARTING...");
console.log("üöÄ ========================================");

const provider = new ethers.providers.JsonRpcProvider(process.env.ETHEREUM_RPC_URL);
const sequencerAddress = process.env.SEQUENCER_ADDRESS ?? "";

export const handler = async (): Promise<void> => {
    console.log("üöÄ Handler function called!");
    console.log("üîß Environment check:");
    console.log("   - ETHEREUM_RPC_URL:", process.env.ETHEREUM_RPC_URL ? "‚úÖ Configurado" : "‚ùå FALTANTE");
    console.log("   - SEQUENCER_ADDRESS:", process.env.SEQUENCER_ADDRESS ? "‚úÖ Configurado" : "‚ùå FALTANTE");
    console.log("   - DISCORD_WEBHOOK_URL:", process.env.DISCORD_WEBHOOK_URL ? "‚úÖ Configurado" : "‚ùå FALTANTE");

    // Verify critical variables
    if (!process.env.ETHEREUM_RPC_URL) {
        console.error("‚ùå ETHEREUM_RPC_URL no est√° configurada!");
        return;
    }
    if (!process.env.SEQUENCER_ADDRESS) {
        console.error("‚ùå SEQUENCER_ADDRESS no est√° configurada!");
        return;
    }
    if (!process.env.DISCORD_WEBHOOK_URL) {
        console.error("‚ùå DISCORD_WEBHOOK_URL no est√° configurada!");
        return;
    }

    try {
        console.log("üîó Connecting to Ethereum...");
        const currentBlock = await provider.getBlockNumber();
        const fromBlock = currentBlock - 10;

        console.log(`‚õìÔ∏è  Current block: ${currentBlock}`);
        console.log(`üîç Checking from block ${fromBlock} to ${currentBlock}`);

        console.log("üìä Getting jobs count...");
        const jobsCount = await numJobs(provider, sequencerAddress);
        console.log(`üìä Total jobs found: ${jobsCount}`);

        const stalledJobs: string[] = [];

        for (let i = 0; i < jobsCount; i++) {
            console.log(`üîé Checking job ${i}/${jobsCount - 1}...`);
            const jobAddress = await jobAt(provider, sequencerAddress, i);
            console.log(`   Job address: ${jobAddress}`);

            const lastWorkedBlock = await getLastWorkedBlock(jobAddress, fromBlock, currentBlock);

            if (lastWorkedBlock === null || lastWorkedBlock < fromBlock) {
                console.warn(`‚ö†Ô∏è  Job ${jobAddress} has NOT been worked in last 10 blocks`);
                stalledJobs.push(jobAddress);
            } else {
                console.log(`‚úÖ Job ${jobAddress} was worked at block ${lastWorkedBlock}`);
            }
        }

        console.log(`üìä Summary: ${stalledJobs.length} stalled jobs out of ${jobsCount} total jobs`);
        
        if (stalledJobs.length > 0) {
            console.log("üö® STALLED JOBS DETECTED:");
            stalledJobs.forEach((job, index) => {
                console.log(`   ${index + 1}. ${job}`);
            });
        } else {
            console.log("‚úÖ All jobs are working properly!");
        }

        let alertMessage: string;
        let alertType: string;

        if (stalledJobs.length > 0) {
            alertMessage = `üö® **MAKERDAO ALERT - JOBS NOT WORKING** üö®\n\n` +
                          `‚ùå **${stalledJobs.length} out of ${jobsCount} jobs** haven't been worked in the last 10 blocks!\n\n` +
                          `**Stalled Job Addresses:**\n` +
                          stalledJobs.map(job => `‚Ä¢ \`${job}\``).join("\n") + "\n\n" +
                          `**Details:**\n` +
                          `‚Ä¢ Current block: ${currentBlock}\n` +
                          `‚Ä¢ Checked blocks: ${fromBlock} - ${currentBlock}\n` +
                          `‚Ä¢ Time: ${new Date().toISOString()}\n\n` +
                          `‚ö†Ô∏è **Action required:** These jobs need immediate attention!`;
            alertType = "CRITICAL";
        } else {
            alertMessage = `‚úÖ **MakerDAO Status - All Jobs Working** ‚úÖ\n\n` +
                          `All **${jobsCount} jobs** have been worked recently!\n\n` +
                          `**Details:**\n` +
                          `‚Ä¢ Current block: ${currentBlock}\n` +
                          `‚Ä¢ Checked blocks: ${fromBlock} - ${currentBlock}\n` +
                          `‚Ä¢ Time: ${new Date().toISOString()}`;
            alertType = "OK";
        }

        console.log(`üö® Sending ${alertType} alert to Discord...`);
        console.log(`üìù Alert message preview: ${alertMessage.substring(0, 100)}...`);
        
        try {
            await sendDiscordAlert(alertMessage);
            console.log("‚úÖ Alert sent successfully!");
        } catch (alertError) {
            console.error("‚ùå Failed to send alert to Discord:", alertError);
        }

    } catch (error) {
        console.error("‚ùå Error en handler:", error);
        
        if (error instanceof Error) {
            console.error("‚ùå Error stack:", error.stack);
        }
        
        try {
            console.log("üö® Sending error alert to Discord...");
            const errorMessage = error instanceof Error ? error.message : String(error);
            const alertMessage = `üö® **MAKERDAO SYSTEM ERROR** üö®\n\n` +
                                `‚ùå **Job checker encountered an error:**\n\`\`\`\n${errorMessage}\n\`\`\`\n\n` +
                                `**Details:**\n` +
                                `‚Ä¢ Time: ${new Date().toISOString()}\n` +
                                `‚Ä¢ Sequencer: ${sequencerAddress}\n` +
                                `‚Ä¢ RPC: ${process.env.ETHEREUM_RPC_URL ? 'Connected' : 'Not configured'}\n\n` +
                                `‚ö†Ô∏è **Action required:** Check system logs and restart monitoring!`;
            await sendDiscordAlert(alertMessage);
            console.log("‚úÖ Error alert sent successfully.");
        } catch (alertError) {
            console.error("‚ùå Failed to send error alert to Discord:", alertError);
            if (alertError instanceof Error) {
                console.error("‚ùå Alert error stack:", alertError.stack);
            }
        }
    }

    console.log("üöÄ Handler execution completed!");
};